#pragma once

namespace ftd {

template <typename...>
using void_t = void; 
 
// primary template (used for zero types)
template <class...>
struct common_type {};
 
//////// one type
template <class T>
struct common_type<T> : common_type<T, T> {};
 
//////// two types
template <class T1, class T2>
using cond_t = decltype(false ? std::declval<T1>() : std::declval<T2>());
 
template <class T1, class T2, class=void>
struct common_type_2_impl {};
 
template <class T1, class T2>
struct common_type_2_impl<T1, T2, void_t<cond_t<T1, T2>>> {
    using type = typename std::decay<cond_t<T1, T2>>::type;
};
 
template <class T1, class T2>
struct common_type<T1, T2> 
  : common_type_2_impl<typename std::decay<T1>::type, 
                       typename std::decay<T2>::type>
{};
 
//////// 3+ types
template <class AlwaysVoid, class T1, class T2, class...R>
struct common_type_multi_impl {};
 
template <class T1, class T2, class...R>
struct common_type_multi_impl<
      void_t<typename common_type<T1, T2>::type>, T1, T2, R...>
  : common_type<typename common_type<T1, T2>::type, R...> {};
 
 
template <class T1, class T2, class... R>
struct common_type<T1, T2, R...>
  : common_type_multi_impl<void, T1, T2, R...> {};

}
